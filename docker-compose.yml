services:

  local:
    build:
      context: ./.docker
      dockerfile: nginx.dockerfile
    ports:
      - "${APP_PORT:-81}:80"
    volumes:
      - ./app/Public:/app/Public
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    env_file:
      - ./dotenv_files/.env
    environment:
      - APP_AMBIENT=${APP_AMBIENT:-development}
      - APP_DOMAIN=${APP_DOMAIN:-localhost}
    depends_on:
      - psql
      - app
    networks:
      - app_network
    restart: always

  production:
    build:
      context: ./.docker
      dockerfile: nginx.dockerfile
    ports:
      - "${APP_PORT:-81}:80"
      - "${APP_PORT_SSL:-443}:443"
    volumes:
      - ./app/Public:/app/Public
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    env_file:
      - ./dotenv_files/.env
    environment:
      - APP_AMBIENT=${APP_AMBIENT:-development}
      - APP_DOMAIN=${APP_DOMAIN:-localhost}
    depends_on:
      - app
    networks:
      - app_network
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/log:/var/log/letsencrypt
    env_file:
      - ./dotenv_files/.env
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot -d ${APP_DOMAIN:-localhost} --non-interactive --agree-tos --email webmaster@${APP_DOMAIN:-localhost}; sleep 12h & wait $${!}; done'
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    expose:
      - 8000:8000
    volumes:
      - ./app:/app
    env_file:
      - ./dotenv_files/.env 
    networks:
      - app_network
    restart: always
      
  django-command-runner:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    volumes:
      - ./app:/app
    env_file:
      - ./dotenv_files/.env
    depends_on:
      - psql
    networks:
      - app_network
    entrypoint: ["entrypoint.sh"]

  psql:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data/
    env_file:
      - ./dotenv_files/.env
    networks:
      - app_network
    restart: always

networks:
  app_network:
    driver: bridge