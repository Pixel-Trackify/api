"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = os.path.join(BASE_DIR, '.env')

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print("✅ .env carregado com sucesso!")
else:
    print("❌ Arquivo .env NÃO encontrado!")

try:
    load_dotenv(dotenv_path)
except Exception as e:
    raise ValueError(f'Error loading .env file: {e}')
    
if not os.getenv('SECRET_KEY'):
    raise ValueError('SECRET_KEY not found in environment variables')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', 0)))

ALLOWED_HOSTS = [
    h.strip() for h in os.getenv('ALLOWED_HOSTS', '').split(',')
    if h.strip()
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'allauth',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework',
    'rest_framework.authtoken',
    
    'django_filters',
    'accounts',
    'plans',
    'authentication',
    'tutorials',
    'campaigns',
    'integrations',
]

SITE_ID = 1


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'Public'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'change-me'),
        'NAME': os.getenv('POSTGRES_DB', 'change-me'),
        'USER': os.getenv('POSTGRES_USER', 'change-me'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'change-me'),
        'HOST': os.getenv('POSTGRES_HOST', 'change-me'),
        'PORT': os.getenv('POSTGRES_PORT', 'change-me'),
    }
}


AUTHENTICATION_BACKENDS = [
    
  
    
]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'Public']

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'security_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join('auth.log'),  # Caminho absoluto
            'when': 'midnight',
            'backupCount': 7,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'console': {  # Novo handler para debug no terminal
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'accounts.views': {
            # Incluído console para debug
            'handlers': ['security_file', 'console'],
            'level': 'DEBUG',  # Alterado para DEBUG para capturar logs de depuração
            'propagate': True,  # Propaga logs para outros handlers se necessário
        },
    },
}

# Configurando o modelo customizado de usuário
AUTH_USER_MODEL = 'accounts.Usuario'

REST_FRAMEWORK = {
    # Classes de autenticação (apenas para autenticação)
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),


    # Backends de filtro (para filtragem, busca e ordenação)
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),

    # Renderizadores padrão (para garantir que a resposta seja JSON)
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}

# Configurações do JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',                           
    'SIGNING_KEY': os.getenv('SECRET_KEY', 'change-me'),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "uid",
    "USER_ID_CLAIM": "user_uid",
}




# Configuração do Django Allauth


ACCOUNT_AUTHENTICATION_METHOD = 'email'  # "email" para login com email, "username" para usuário
ACCOUNT_EMAIL_REQUIRED = True  # O email é obrigatório
ACCOUNT_USERNAME_REQUIRED = False  # Desativa username padrão do Django
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # Define que não há campo de username
ACCOUNT_EMAIL_VERIFICATION = 'none'  # "optional", "mandatory" ou "none"
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'

ACCOUNT_RATE_LIMITS = {
    'login_failed': f"{os.getenv('MAX_LOGIN_ATTEMPTS', '5')}/{int(os.getenv('LOCKOUT_DURATION_MINUTES', '5')) * 60}s",
}



# Configurações de validação de senha
PASSWORD_MIN = int(os.getenv('PASSWORD_MIN', 8))
PASSWORD_MAX = int(os.getenv('PASSWORD_MAX', default=30))
PASSWORD_BLOCK_COMMON = bool(os.getenv('PASSWORD_BLOCK_COMMON', default=True))
PASSWORD_COMMON_LIST = str(
    os.getenv('PASSWORD_COMMON_LIST', default='common_passwords.txt'))
PASSWORD_REQUIRE_UPPERCASE = bool(os.getenv(
    'PASSWORD_REQUIRE_UPPERCASE', default=True))
PASSWORD_REQUIRE_SPECIAL_CHAR = bool(os.getenv(
    'PASSWORD_REQUIRE_SPECIAL_CHAR', default=True))
