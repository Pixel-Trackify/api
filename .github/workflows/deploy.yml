name: CD App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy .env.example to .env and replace secrets
      run: |
        cp .env-example .env
        sed -i 's|DEBUG=.*|DEBUG=${{ secrets.DEBUG }}|' .env
        sed -i 's|ALLOWED_HOSTS=.*|ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}|' .env
        sed -i 's|SECRET_KEY=.*|SECRET_KEY=${{ secrets.SECRET_KEY }}|' .env
        sed -i 's|POSTGRES_DB=.*|POSTGRES_DB=${{ secrets.POSTGRES_DB }}|' .env
        sed -i 's|POSTGRES_USER=.*|POSTGRES_USER=${{ secrets.POSTGRES_USER }}|' .env
        sed -i 's|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}|' .env
        sed -i 's|POSTGRES_HOST=.*|POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}|' .env
        sed -i 's|POSTGRES_PORT=.*|POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}|' .env
        sed -i 's|APP_PORT=.*|APP_PORT=${{ secrets.APP_PORT }}|' .env
        sed -i 's|APP_PORT_SSL=.*|APP_PORT_SSL=${{ secrets.APP_PORT_SSL }}|' .env
        sed -i 's|APP_DOMAIN=.*|APP_DOMAIN=${{ secrets.APP_DOMAIN }}|' .env
        sed -i 's|WEBHOOK_BASE_URL=.*|WEBHOOK_BASE_URL=${{ secrets.WEBHOOK_BASE_URL }}|' .env
        sed -i 's|APP_AMBIENT=.*|APP_AMBIENT=${{ secrets.APP_AMBIENT }}|' .env
        sed -i 's|FIRE_BANKING_API_KEY=.*|FIRE_BANKING_API_KEY=${{ secrets.FIRE_BANKING_API_KEY }}|' .env
        sed -i 's|CORS_ALLOW_ALL_ORIGINS=.*|CORS_ALLOW_ALL_ORIGINS=${{ secrets.CORS_ALLOW_ALL_ORIGINS }}|' .env
        sed -i 's|AWS_ACCESS_KEY_ID=.*|AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}|' .env
        sed -i 's|AWS_SECRET_ACCESS_KEY=.*|AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}|' .env
        sed -i 's|AWS_DEFAULT_REGION=.*|AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}|' .env
        sed -i 's|AWS_BUCKET=.*|AWS_BUCKET=${{ secrets.AWS_BUCKET }}|' .env
        sed -i 's|REQUIRE_EMAIL_CONFIRMATION=.*|REQUIRE_EMAIL_CONFIRMATION=${{ secrets.REQUIRE_EMAIL_CONFIRMATION }}|' .env

    - name: Clean Up Django Migration Files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd ${{ secrets.SSH_TARGET }}
          find app/ -type d -name migrations -exec rm -rf {} +

    - name: Deploy to Server via SCP
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: ./*
        target: ${{ secrets.SSH_TARGET }}

    - name: Rolling Restart
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SSH_TARGET }}
            
            echo "ðŸ”„ Criando nova imagem sem derrubar tudo..."
            sudo docker compose run --rm 
            sudo docker compose build app
  
            echo "ðŸš€ Reiniciando containers um por um..."
            for container in $(docker ps --format "{{.Names}}" | grep app); do
              echo "ðŸ”„ Reiniciando $container"
              sudo docker restart $container
              sleep 5
            done
            
            echo "ðŸ§¹ Limpando imagens antigas..."
            sudo docker image prune -f

            echo "âœ… Deploy concluÃ­do!"

    - name: Migrate Database
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SSH_TARGET }}
            find app/ -type d -name migrations -exec rm -rf {} +
            sudo docker compose build --no-cache django-command-runner
            sudo docker compose run --rm django-command-runner python manage.py migrate